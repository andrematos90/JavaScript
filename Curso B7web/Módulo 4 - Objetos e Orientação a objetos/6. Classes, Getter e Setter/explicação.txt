Em JavaScript, as classes, getters e setters são recursos que permitem criar objetos com propriedades controladas e métodos específicos para acessar e modificar essas propriedades. Isso ajuda a garantir a encapsulação e a segurança dos dados, permitindo que você defina comportamentos personalizados para o acesso e a atribuição de valores a essas propriedades.

Vamos explicar cada conceito separadamente:

Classes:
As classes são uma forma de criar objetos em JavaScript usando a sintaxe de classe. As classes podem conter propriedades e métodos, e você pode criar instâncias delas para criar objetos específicos. A declaração de uma classe segue a seguinte estrutura:

class NomeDaClasse {
  constructor(propriedade1, propriedade2, ...) {
    // Definição das propriedades da classe
    this.propriedade1 = propriedade1;
    this.propriedade2 = propriedade2;
    // ...
  }

  // Métodos da classe
  metodo1() {
    // Implementação do método
  }

  metodo2() {
    // Implementação do método
  }

  // ...
}


Getter:
Um getter é um método especial dentro de uma classe que é usado para obter o valor de uma propriedade específica. Eles são identificados pelo uso da palavra-chave get antes do nome do método. Quando você tenta acessar a propriedade, o método getter é chamado automaticamente e seu retorno é considerado o valor da propriedade.
Exemplo de um getter:

class Exemplo {
  constructor(nome) {
    this._nome = nome;
  }

  get nome() {
    return this._nome;
  }
}

const exemploObj = new Exemplo('João');
console.log(exemploObj.nome); // Saída: "João"

Observe que, no exemplo acima, o getter nome é usado para obter o valor da propriedade _nome. Por convenção, é comum usar o prefixo _ para indicar que a propriedade deve ser tratada como privada e não acessada diretamente.

Setter:
Um setter é outro método especial dentro de uma classe que é usado para atribuir um valor a uma propriedade específica. Eles são identificados pelo uso da palavra-chave set antes do nome do método. Quando você tenta atribuir um valor à propriedade, o método setter é chamado automaticamente, permitindo que você defina regras ou condições antes de modificar a propriedade.
Exemplo de um setter:

class Exemplo {
  constructor() {
    this._nome = '';
  }

  get nome() {
    return this._nome;
  }

  set nome(novoNome) {
    if (typeof novoNome === 'string') {
      this._nome = novoNome;
    } else {
      console.log('Erro: O nome deve ser uma string.');
    }
  }
}

const exemploObj = new Exemplo();
exemploObj.nome = 'Maria'; // A chamada do setter ocorre aqui
console.log(exemploObj.nome); // Saída: "Maria"

exemploObj.nome = 42; // Tentando atribuir um valor inválido
// Saída: "Erro: O nome deve ser uma string."


No exemplo acima, o setter nome é usado para definir o valor da propriedade _nome. Antes de atribuir o valor, o setter verifica se o novo nome é uma string; caso contrário, ele emite uma mensagem de erro.

Em resumo, as classes, getters e setters são recursos poderosos que permitem criar objetos JavaScript com propriedades controladas e personalizadas, melhorando a modularidade e segurança do código.

Os getters e setters servem para definir propriedades de objetos de acordo com regras específicas criadas nesses métodos. Eles permitem que você tenha um maior controle sobre o acesso e a atribuição de valores às propriedades de uma classe.

Ao utilizar getters e setters, você pode implementar lógicas adicionais, como validações, tratamentos ou cálculos, antes de obter ou definir o valor de uma propriedade. Isso ajuda a garantir a consistência e a integridade dos dados armazenados nos objetos.

Alguns exemplos de como os getters e setters podem ser úteis:

Validação de valores: Você pode verificar se um valor atribuído a uma propriedade é válido antes de permitir que ele seja definido.

Cálculos automáticos: É possível calcular e retornar valores com base em outras propriedades da classe.

Encapsulamento: Os getters e setters permitem ocultar os detalhes de implementação das propriedades e fornecer uma interface mais simples para o uso das classes.

Controle de acesso: É possível restringir o acesso a determinadas propriedades, tornando-as somente leitura ou privadas.

Dependências observáveis: Em algumas bibliotecas e frameworks, os getters e setters podem ser usados para criar dependências observáveis entre as propriedades, permitindo que outras partes do código sejam notificadas quando uma propriedade é alterada.

Esses são apenas alguns exemplos das possibilidades que os getters e setters oferecem. Ao usar esses recursos, você pode criar classes mais seguras, modulares e flexíveis em JavaScript.


-----------------------------------------------------------------------------------------

O getter é um método que cria "verificações" para permitir o acesso a uma propriedade da classe. Ele é responsável por retornar o valor da propriedade quando essa propriedade é acessada externamente. O objetivo principal do getter é permitir que você controle como o valor da propriedade é obtido e, se necessário, realizar algum processamento ou lógica adicional antes de retornar o valor.

Por exemplo, um getter pode ser usado para formatar ou calcular um valor com base em outras propriedades da  antes de retorná-lo. Isso torna a obtenção do valor mais flexível e dinâmica, sem a necessidade de expor diretamente a propriedade em si.

Por outro lado, o setter é um método que cria "validações" para permitir a alteração de uma propriedade específica de um objeto criado a partir da classe. Ele não atua na classe em si, mas sim nos objetos individuais (instanciados) que são criados a partir da classe.. Ele é responsável por definir o valor de uma propriedade quando essa propriedade é atribuída externamente.  Cada objeto terá seu próprio setter para essa propriedade, o que significa que as validações aplicadas no setter serão específicas para cada objeto individual.. O objetivo principal do setter é permitir que você controle como o valor é definido, aplicando regras e validações antes de efetivamente modificar o valor da propriedade.

Por exemplo, um setter pode ser usado para verificar se o novo valor atribuído é válido, e somente permitir a modificação da propriedade se ele atender a determinadas condições. Isso garante que o estado interno do objeto seja consistente e que não ocorram alterações indesejadas ou incorretas.

Em resumo, o getter e o setter são métodos que trabalham juntos para fornecer uma interface controlada para acessar e modificar as propriedades de uma classe. Eles ajudam a garantir o encapsulamento dos dados, fornecendo uma camada de proteção e controle sobre o acesso e a manipulação das propriedades dos objetos.


quando se usao o método set a atribuição de valor funciona como se fosse uma atribuição
normal de uma váriavel:



carro.combustivel = 100;;  pq na classe foi usado a método set

carro.combustivel(100)  como seria se na classe não tivesse usado o set