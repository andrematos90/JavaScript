
Uma instância, no contexto da programação orientada a objetos, é um objeto criado a partir de uma classe. Podemos pensar em uma classe como um modelo ou uma planta que define as características (atributos) e comportamentos (métodos) que os objetos terão. Quando você cria um objeto usando essa classe, você está instanciando a classe, ou seja, criando uma instância dessa classe.

Vamos pegar o exemplo prático de código que eu mostrei anteriormente para explicar melhor:

class Carro {
  constructor(marca, modelo, ano) {
    this.marca = marca;
    this.modelo = modelo;
    this.ano = ano;
    this.ligado = false;
    this.velocidade = 0;
  }

  // ... métodos do carro
}

const meuCarro = new Carro('Toyota', 'Corolla', 2022);


Neste exemplo, temos a classe Carro com um construtor que recebe alguns parâmetros para definir os atributos do carro. Na última linha do código, criamos uma instância da classe Carro usando o operador new e passando os valores 'Toyota', 'Corolla' e 2022 como argumentos para o construtor.

meuCarro é uma instância da classe Carro. Ele é um objeto que foi criado seguindo o modelo definido na classe Carro. Como resultado, ele tem os atributos marca, modelo, ano, ligado e velocidade, assim como os métodos ligar, desligar, acelerar e frear, definidos na classe.

Cada vez que você cria uma nova instância da classe Carro, ela possui seu próprio conjunto de atributos, que podem ser diferentes dos atributos de outras instâncias. Por exemplo, você pode criar outro carro com uma marca e modelo diferentes:

const outroCarro = new Carro('Honda', 'Civic', 2021);


Agora, outroCarro é outra instância da classe Carro, mas com valores diferentes para os atributos marca, modelo e ano. Isso ilustra como a criação de instâncias permite que você crie múltiplos objetos com comportamentos e características semelhantes, mas com estados diferentes.


Nas classes em JavaScript, os métodos são compartilhados entre todas as instâncias criadas a partir dessa classe. Isso significa que todas as instâncias da mesma classe terão os mesmos métodos com a mesma implementação.

No exemplo que mostramos anteriormente, todas as instâncias criadas a partir da classe Carro terão os mesmos métodos ligar, desligar, acelerar e frear. Esses métodos têm a mesma implementação definida na classe e executarão as mesmas ações para todas as instâncias.

Por exemplo, se criarmos mais de uma instância de Carro, como mostrado abaixo:


const meuCarro = new Carro('Toyota', 'Corolla', 2022);
const outroCarro = new Carro('Honda', 'Civic', 2021);


Ambas as instâncias, meuCarro e outroCarro, terão os mesmos métodos ligar, desligar, acelerar e frear com a mesma implementação. No entanto, os valores dos atributos, como marca, modelo e ano, serão diferentes para cada instância, pois eles são definidos no momento da criação do objeto.

Essa é uma das vantagens da orientação a objetos: você pode definir métodos e comportamentos em uma classe uma vez e reutilizá-los em várias instâncias, economizando tempo e esforço de programação. Isso também ajuda a manter o código organizado, já que a lógica dos métodos é centralizada na classe.
